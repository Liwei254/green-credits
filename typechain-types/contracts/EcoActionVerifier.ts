/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EcoActionVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "actions"
      | "getActionCount"
      | "owner"
      | "renounceOwnership"
      | "submitAction"
      | "token"
      | "totalEarned"
      | "transferOwnership"
      | "verifyAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionSubmitted"
      | "ActionVerified"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "actions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitAction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalEarned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAction",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAction",
    data: BytesLike
  ): Result;
}

export namespace ActionSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    description: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    description: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    description: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    reward: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, reward: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    reward: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EcoActionVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): EcoActionVerifier;
  waitForDeployment(): Promise<this>;

  interface: EcoActionVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  actions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, bigint] & {
        user: string;
        description: string;
        reward: bigint;
        verified: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getActionCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitAction: TypedContractMethod<
    [description: string],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalEarned: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyAction: TypedContractMethod<
    [actionId: BigNumberish, reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "actions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, bigint] & {
        user: string;
        description: string;
        reward: bigint;
        verified: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitAction"
  ): TypedContractMethod<[description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalEarned"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyAction"
  ): TypedContractMethod<
    [actionId: BigNumberish, reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActionSubmitted"
  ): TypedContractEvent<
    ActionSubmittedEvent.InputTuple,
    ActionSubmittedEvent.OutputTuple,
    ActionSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ActionVerified"
  ): TypedContractEvent<
    ActionVerifiedEvent.InputTuple,
    ActionVerifiedEvent.OutputTuple,
    ActionVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ActionSubmitted(address,string,uint256)": TypedContractEvent<
      ActionSubmittedEvent.InputTuple,
      ActionSubmittedEvent.OutputTuple,
      ActionSubmittedEvent.OutputObject
    >;
    ActionSubmitted: TypedContractEvent<
      ActionSubmittedEvent.InputTuple,
      ActionSubmittedEvent.OutputTuple,
      ActionSubmittedEvent.OutputObject
    >;

    "ActionVerified(address,uint256,uint256)": TypedContractEvent<
      ActionVerifiedEvent.InputTuple,
      ActionVerifiedEvent.OutputTuple,
      ActionVerifiedEvent.OutputObject
    >;
    ActionVerified: TypedContractEvent<
      ActionVerifiedEvent.InputTuple,
      ActionVerifiedEvent.OutputTuple,
      ActionVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
